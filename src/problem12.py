'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of
 the first triangle number to have over five hundred divisors?
'''


def divisors(n):
    count = 0
    div = 1
    while div * div <= n:
        if n % div == 0:
            count += 2
        div += 1
    return count


def find_triangle():
    i = 2
    triangle = 0
    max_size = 500
    while True:
        triangle = i * (i - 1) // 2
        if((divisors(triangle)) > max_size):
            break
        i += 1
    return triangle

print ("Triangle number is {}".format(find_triangle()))

import timeit
t = timeit.Timer("find_triangle", "from __main__ import find_triangle")
print ("Average running time: {} seconds".format(t.timeit(1000)))
